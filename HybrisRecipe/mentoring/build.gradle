buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
    }
}

ext {
    workDir = "./work"
}

def config = {
    localProperties {
       '# That is properties generated by mentoring recipe. Fill free to change necessary configuration.'

        property 'hac.webroot' , '/hac'

        property 'tomcat.generaloptions' , '-Xmx4096M -XX:-UseLoopPredicate -XX:MaxPermSize=512M -XX:+HeapDumpOnOutOfMemoryError -ea -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dorg.tanukisoftware.wrapper.WrapperManager.mbean=true -Djava.endorsed.dirs="%CATALINA_HOME%/lib/endorsed" -Dcatalina.base=%CATALINA_BASE% -Dcatalina.home=%CATALINA_HOME% -Dfile.encoding=UTF-8 -Dlog4j.configuration=log4j_init_tomcat.properties -Djava.util.logging.config.file=jdk_logging.properties'
        property 'standalone.javaoptions' , '-Xmx2040M -XX:MaxPermSize=512M -XX:+HeapDumpOnOutOfMemoryError -ea -XX:-UseLoopPredicate'

        property 'website.electronics.http', 'http://electronics.local:9001/yacceleratorstorefront'
        property 'website.electronics.https', 'https://electronics.local:9002/yacceleratorstorefront'
    }
	
	dbSetup {
        dbType 'mysql'
        dbUrl 'jdbc:mysql://localhost/hybris?useConfigs=maxPerformance&characterEncoding=utf8'
        dbUser 'hybris'
        dbPassword 'hybris'
    }

    extensions {
        extName 'mcc'
        extName 'commercesearchbackoffice'
        extName 'commerceservicesbackoffice'
        extName 'solrfacetsearchbackoffice'
        extName 'solrserver'

        extName 'electronicsstore'
		
		extName 'yacceleratorcockpits'
		extName 'yacceleratorinitialdata'
		extName 'yacceleratorfulfilmentprocess'
		extName 'yacceleratorstorefront'

        extName 'liveeditaddon'
        extName 'acceleratorwebservicesaddon'
        extName 'orderselfserviceaddon'

        extName 'customersupportbackoffice'
        extName 'customerticketingaddon'
        extName 'commerceorgsamplesaddon'

        extName 'commercefacades'
        extName 'commerceservices'

        extName 'rulebuilderbackoffice'
        extName 'couponbackoffice'
        extName 'droolsruleengineservices'
        extName 'couponfacades'
        extName 'promotionenginesamplesaddon'

        extName 'cmswebservices'
        extName 'smarteditwebservices'
        extName 'cmssmarteditwebservices'
        extName 'permissionswebservices'
        extName 'smarteditaddon'
        extName 'cmssmartedit'

        extName 'previewpersonalizationweb'
        extName 'personalizationcmsweb'
        extName 'personalizationsmartedit'
        extName 'personalizationsampledataaddon'
        extName 'personalizationyprofile'
        extName 'personalizationpromotions'
        extName 'personalizationpromotionsweb'
        extName 'personalizationservicesbackoffice'
        extName 'personalizationpromotionsbackoffice'
        extName 'personalizationcmsbackoffice'

        extName 'textfieldconfiguratortemplatebackoffice'
        extName 'textfieldconfiguratortemplateaddon'
        extName 'assistedservicestorefront'

        extName 'assistedserviceatddtests'
        extName 'promotionengineatddtests'
        extName 'commercesearchatddtests'
        extName 'textfieldconfiguratortemplateatddtests'
    }
}

apply plugin: 'installer-platform-plugin'
def pl = platform(config)

task setup << {
    pl.setup()

    pl.executeAntTarget 'extgen -Dinput.template=ycommercewebservices -Dinput.name=mentoringext -Dinput.package=com.epam.mentoring.ext'
    pl.extensions {
        extName 'mentoringext'
    }
    pl.setup()
}

task initialize << {
    pl.build()
    pl.initialize()
}

task start << {
    pl.start()
}
